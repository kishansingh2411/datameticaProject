--######################################################################################################################
--#   This source code is the property of:
--#   Cablevision Systems Corporation, Inc. (c) 2015
--#   1111 Stewart Avenue, Bethpage, NY 11714
--#   www.cablevision.com
--#   Department: AM
--#
--#   Program name: module-transform.pig
--#   Program type: Pig script
--#   Purpose:    : Loading data in work_chc_* tables
--#   Author(s)   : DataMetica Team
--#   Usage       : pig -p var1=var1 -useHCatalog module-prepare.pig
--#   Date        : 22/12/2016
--#   Log File    : .../log/ovcdr/${job_name}.log
--#   SQL File    : 
--#   Error File  : .../log/ovcdr/${job_name}.log
--#   Dependency  : 
--#   Disclaimer  : 
--#
--#   Modification History :
--#   =======================
--#
--#    ver     who                      date             comments
--#   ------   --------------------     ----------       -------------------------------------
--#    1.0     DataMetica Team          22/12/2016       Initial version
--#
--#
--#####################################################################################################################
--#                                   Load                                     #
--##############################################################################

define Stitch org.apache.pig.piggybank.evaluation.Stitch;
define Over org.apache.pig.piggybank.evaluation.Over('int');
SET hive.mapred.supports.subdirectories true;
SET mapred.input.dir.recursive true;

--Loading Incoming table
incoming_agg_data = 
   LOAD '${hive_database_name_incoming}.${incoming_agg_data}'
   USING org.apache.hive.hcatalog.pig.HCatLoader()
;

--Considering data for current batch
incoming_agg_data_current = 
   FILTER incoming_agg_data BY (source_date == '${dtm_start}')
;

--Generating required columns
incoming_agg_data_current_record = 
   FOREACH incoming_agg_data_current
   GENERATE usage_date,
   telephone_number
;

--Loading Gold table
gold_agg_data = 
   LOAD '${hive_database_name_gold}.${gold_agg_data}'
   USING org.apache.hive.hcatalog.pig.HCatLoader()
;

--Considering last $number of days data
gold_agg_data_last_num_days = 
   FILTER gold_agg_data BY (corp == -1) 
   AND (DaysBetween(dtm_created,ToDate('${dtm_start}','yyyy-MM-dd')) <= ${param_numeric})
   AND (DaysBetween(ToDate('${dtm_start}','yyyy-MM-dd'),dtm_created) >= 0)
;

--Generating required columns
gold_agg_data_record = 
   FOREACH gold_agg_data_last_num_days
   GENERATE usage_date,
   telephone_number
;

--Merging aggregate data from Incoming and Gold
aggregate_data = 
   UNION incoming_agg_data_current_record,
   gold_agg_data_record
;

--Grouping data on basis of telephone_number
aggregate_data_group = 
   GROUP aggregate_data BY (telephone_number)
;

--Deriving row_number 
aggregate_data_derive_row_num = 
   FOREACH aggregate_data_group
   {
      aggregate_data_order = 
	     ORDER aggregate_data BY usage_date DESC
	;
	GENERATE
	FLATTEN(Stitch(aggregate_data_order,Over(aggregate_data_order,'row_number')))
	;
   }
;

--Generating required columns
aggregate_data_row_gen = 
   FOREACH aggregate_data_derive_row_num
   GENERATE
   stitched::usage_date as usage_date,
   stitched::telephone_number as telephone_number,
   stitched::result as row_number
;

--Eliminating duplicates on basis of telephone number
aggregate_data_unique = 
   FILTER aggregate_data_row_gen BY (row_number == 1)
;

--Loading OV_Telephone_nbr table
ov_telephone_number = 
   LOAD '${hive_database_name_ods_incoming}.${ov_telephone_number}' 
   USING org.apache.hive.hcatalog.pig.HCatLoader()
;

--Generating required columns
ov_telephone_number_record = 
   FOREACH ov_telephone_number
   GENERATE 
   corp as corp,
   customer_account_id,
   dtm_last_modified,
   telephone_number,
   ToString(dtm_efftv,'yyyyMMdd') as dtm_efftv,
   ToString(dtm_expired,'yyyyMMdd') as dtm_expired
;

--Considering Active users as per Current batch
ov_telephone_number_active = 
   FILTER ov_telephone_number_record BY (dtm_efftv <= '${source_date}') 
   AND (dtm_expired > '${source_date}')
;

--Grouping data on basis of telephone_number
ov_telephone_number_active_group =
   GROUP ov_telephone_number_active BY (telephone_number)
;

--Deriving row_number 
ov_telephone_number_active_derive_row_num = 
   FOREACH ov_telephone_number_active_group
   {
      ov_telephone_number_active_order = 
	     ORDER ov_telephone_number_active BY dtm_efftv DESC,
		 dtm_expired DESC,
		 dtm_last_modified DESC
	;
	GENERATE
	FLATTEN(Stitch(ov_telephone_number_active_order,Over(ov_telephone_number_active_order,'row_number')))
	;
   }
;

--Generating required columns
ov_telephone_number_active_row_gen = 
   FOREACH ov_telephone_number_active_derive_row_num
   GENERATE
   stitched::corp as corp,
   stitched::customer_account_id as customer_account_id,
   stitched::telephone_number as telephone_number,
   stitched::result as row_number
;

--Eliminating duplicates on basis of telephone number
ov_telephone_number_active_unique = 
   FILTER ov_telephone_number_active_row_gen BY (row_number == 1)
;

--Loading Custome_Account table
customer_account = 
   LOAD '${hive_database_name_ods_incoming}.${customer_account}'
   USING org.apache.hive.hcatalog.pig.HCatLoader()
;

--Generating required columns
customer_account_record = 
   FOREACH customer_account
   GENERATE dwelling_nbr as coct_dwelling_nbr,
   customer_account_id,
   cust as coct_cust
;

--Loading Sip_Did_Phn_nbr table
sip_did = 
   LOAD '${hive_database_name_ods_incoming}.${ip_sip_did_phone_nbr}'
   USING org.apache.hive.hcatalog.pig.HCatLoader()
;

--Generating required columns
sip_did_record = 
   FOREACH sip_did
   GENERATE corp as ipdd_corp,
   dwelling_nbr as ipdd_dwelling_nbr,
   cust as ipdd_cust,
   dtm_last_updated,
   CONCAT(area_code,phone_exchange,exchange_extention) as telephone_number,
   ToString(dtm_efftv,'yyyyMMdd') as dtm_efftv,
   ToString(dtm_expired,'yyyyMMdd') as dtm_expired
;

--Considering Active users as per Current batch
sip_did_active = 
   FILTER sip_did_record BY (dtm_efftv <= '${source_date}') 
   AND (dtm_expired > '${source_date}')
;

--Grouping data on basis of telephone_number
sip_did_active_group = 
   GROUP sip_did_active BY (telephone_number)
;

--Deriving row_number 
sip_did_active_derive_row_num = 
   FOREACH sip_did_active_group
   {
      sip_did_active_order = 
	     ORDER sip_did_active BY dtm_efftv DESC,
		 dtm_expired DESC,
		 dtm_last_updated DESC
	;
	GENERATE
	FLATTEN(Stitch(sip_did_active_order,Over(sip_did_active_order,'row_number')))
	;
   }
;

--Generating required columns
sip_did_active_row_gen = 
   FOREACH sip_did_active_derive_row_num
   GENERATE
   stitched::ipdd_corp as ipdd_corp,
   stitched::ipdd_dwelling_nbr as ipdd_dwelling_nbr,
   stitched::ipdd_cust as ipdd_cust,
   stitched::telephone_number as telephone_number,
   stitched::result as row_number
;

--Eliminating duplicates on basis of telephone number
sip_did_active_unique = 
   FILTER sip_did_active_row_gen BY (row_number == 1)
;

--Loading Sip_Pilot_Phn_nbr table
sip_pilot = 
   LOAD '${hive_database_name_ods_incoming}.${ip_sip_pilot_phone_nbr}'
   USING org.apache.hive.hcatalog.pig.HCatLoader()
;

--Generating required columns
sip_pilot_record = 
   FOREACH sip_pilot
   GENERATE   corp as ippt_corp,
   dwelling_nbr as ippt_dwelling_nbr,
   cust as ippt_cust,
   dtm_last_updated as dtm_last_updated,
   CONCAT(area_code,phone_exchange,exchange_extention) as telephone_number,  
   ToString(dtm_efftv,'yyyyMMdd') as dtm_efftv,
   ToString(dtm_expired,'yyyyMMdd') as dtm_expired
;

--Considering Active users as per Current batch
sip_pilot_active = 
   FILTER sip_pilot_record BY (dtm_efftv <= '${source_date}') 
   AND (dtm_expired > '${source_date}')
;

--Grouping data on basis of telephone_number
sip_pilot_active_group = 
   GROUP sip_pilot_active BY (telephone_number)
;

--Deriving row_number 
sip_pilot_active_derive_row_num = 
   FOREACH sip_pilot_active_group
   {
      sip_pilot_active_order = 
	     ORDER sip_pilot_active BY dtm_efftv DESC,
		 dtm_expired DESC,
		 dtm_last_updated DESC
	;
	GENERATE
	FLATTEN(Stitch(sip_pilot_active_order,Over(sip_pilot_active_order,'row_number')))
	;
   }
;

--Generating required columns 
sip_pilot_active_row_gen = 
   FOREACH sip_pilot_active_derive_row_num
   GENERATE
   stitched::ippt_corp as ippt_corp,
   stitched::ippt_dwelling_nbr as ippt_dwelling_nbr,
   stitched::ippt_cust as ippt_cust,
   stitched::telephone_number as telephone_number,
   stitched::result as row_number
;

--Eliminating duplicates on basis of telephone number
sip_pilot_active_unique = 
   FILTER sip_pilot_active_row_gen BY (row_number == 1)
;

--Joining Aggregate data with Ov_Telephone number
agg_unique_ov_telephone_join = 
   JOIN aggregate_data_unique BY telephone_number LEFT OUTER, 
   ov_telephone_number_active_unique BY telephone_number
;

--Generating Corp and Customer account Id
agg_unique_ov_telephone_record = 
   FOREACH agg_unique_ov_telephone_join
   GENERATE usage_date,
   aggregate_data_unique::telephone_number as telephone_number,
   corp,
   customer_account_id 
;

-- Splitting generated data on basis of Corp
SPLIT agg_unique_ov_telephone_record
   INTO  agg_ov_telephone_corp_nn
   IF(
      corp is not null
   ),
   agg_ov_telephone_corp_null otherwise
;

--Joining with Customer data
agg_customer_account_join = 
   JOIN agg_ov_telephone_corp_nn BY customer_account_id LEFT OUTER,
   customer_account_record BY customer_account_id
;

--Generating CHC having customer_account_id
agg_customer_account_record = 
   FOREACH agg_customer_account_join
   GENERATE agg_ov_telephone_corp_nn::aggregate_data_unique::usage_date as usage_date,
   agg_ov_telephone_corp_nn::telephone_number as telephone_number,
   corp as ovtn_corp,
   coct_dwelling_nbr,
   coct_cust
;

--Joining with Did phone number having customer_account_id is null
agg_sip_did_join = 
   JOIN agg_ov_telephone_corp_null BY telephone_number LEFT OUTER,
   sip_did_active_unique BY telephone_number
;

--Generating required columns
agg_sip_did_record = 
   FOREACH agg_sip_did_join
   GENERATE agg_ov_telephone_corp_null::aggregate_data_unique::usage_date as usage_date,
   agg_ov_telephone_corp_null::telephone_number as telephone_number,
   ((int)sip_did_active_unique::ipdd_corp is null ? -1 : (int)sip_did_active_unique::ipdd_corp) as ipdd_corp,
   ((int)sip_did_active_unique::ipdd_dwelling_nbr is null ? -1 : (int)sip_did_active_unique::ipdd_dwelling_nbr) as ipdd_dwelling_nbr,
   ((int)sip_did_active_unique::ipdd_cust is null ? -1 : (int)sip_did_active_unique::ipdd_cust) as ipdd_cust
;

-- Splitting records having CHC is null post joining with sip_did_phone_nbr table
SPLIT agg_sip_did_record
   INTO agg_sip_did_chc_nn
   IF (
      ipdd_corp is not null
	  AND 
	  ipdd_dwelling_nbr is not null
	  AND
	  ipdd_cust is not null
   ),
   agg_sip_did_chc_null OTHERWISE
;

--Joining with Sip Pilot telephone_number table
agg_sip_did_pilot_join = 
   JOIN agg_sip_did_chc_null BY telephone_number LEFT OUTER,
   sip_pilot_active_unique BY telephone_number
;

--Generating required columns
agg_sip_did_pilot_record = 
   FOREACH agg_sip_did_pilot_join
   GENERATE agg_sip_did_chc_null::usage_date as usage_date,
   agg_sip_did_chc_null::telephone_number as telephone_number,
   ((int)sip_pilot_active_unique::ippt_corp is null ? -1 : (int)sip_pilot_active_unique::ippt_corp) as ippt_corp,
   ((int)sip_pilot_active_unique::ippt_dwelling_nbr is null ? -1 : (int)sip_pilot_active_unique::ippt_dwelling_nbr ) as ippt_dwelling_nbr,
   ((int)sip_pilot_active_unique::ippt_cust is null ? -1 : (int)sip_pilot_active_unique::ippt_cust ) as ippt_cust
;

--Union of CHC data derived from all three tables
aggregate_data_chc = 
   UNION agg_customer_account_record,
   agg_sip_did_chc_nn,
   agg_sip_did_pilot_record
;

--Generating required schema prior storing at Work layer
work_agg_chc_record = 
   FOREACH aggregate_data_chc
   GENERATE usage_date,
   telephone_number,
   (chararray)ovtn_corp as corp,
   TRIM((chararray)coct_dwelling_nbr) as house,
   (chararray)coct_cust as cust
;

--Storing at Work layer
STORE work_agg_chc_record
   INTO '${hive_database_name_work}.${work_agg_chc}' 
   USING org.apache.hive.hcatalog.pig.HCatStorer()
;
				 
--##############################################################################
--#                              End                                           #
--##############################################################################			