package com.alticeusa.ds.svodusagedemographics.utils;

import java.io.IOException;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.fs.FileUtil;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.FileStatus;
import org.apache.hadoop.conf.Configuration;

/**
 * Util class contains the common utility functions used
 * across various classes.
 *
 * @author Kriti Singh
 */
public final class Util
{
  private static final DateFormat dateFormat = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss");
  private static final DateFormat dayFormat = new SimpleDateFormat( "yyyy-MM-dd");

  private static final Date CURRENT_DATE = new Date( );
  private static final String DATESTR = dayFormat.format( CURRENT_DATE);

  private static final String SUCCESS_FILE = "_SUCCESS";

  public static void deleteLogFiles( Configuration conf, String dir)
    throws IOException
  {
    FileSystem fs = FileSystem.get( conf);
    fs.delete( new Path( dir + "/" + "_logs"), true);
  }
  
  public static void deleteSuccessFiles( Configuration conf, String dir)
    throws IOException
  {
    FileSystem fs = FileSystem.get( conf);
    fs.delete( new Path( dir + "/" + SUCCESS_FILE), true);
  }

  public static void remove( Configuration conf, String dir)
    throws IOException
  {
    FileSystem fs = FileSystem.get( conf);
    fs.delete( new Path( dir), true);
  }

  public static void rename( Configuration conf, String olddir, String newdir)
    throws IOException
  {
    FileSystem fs = FileSystem.get( conf);
    fs.rename( new Path( olddir), new Path( newdir));
  }

  static void copy( String src, String dst, Configuration conf) 
    throws IOException 
  {
    FileSystem fs = FileSystem.get( conf);
    Path srcPath = new Path( src);
    Path dstPath = new Path( dst);
    fs.mkdirs( dstPath);

    FileStatus[] srcs = fs.listStatus( srcPath);

    for( int i = 0; i < srcs.length; i++)
      FileUtil.copy( fs, srcs[i].getPath( ), fs, dstPath, false, conf);
  }

  /**
   * Moves the files from source to target where the filename matches the 
   * given pattern.
   * If target dir does not exists, it will be created. If it already exists,
   * then files will be copied into it. Existing files in the target directory
   * won't be affected. If target directory contains files with the same names
   * move will fail.
   */
  public static void move( Configuration conf, String srcDir, String tgtDir,
                           String pattern)
    throws IOException
  {
    FileSystem fs = FileSystem.get( conf);
    fs.mkdirs( new Path( tgtDir));

    String filePattern =  srcDir + "/" + pattern;
    FileStatus[] fileStatusArr = fs.globStatus( new Path( filePattern));

    for( int i = 0; i < fileStatusArr.length; i++)
    {
      Path srcPath = fileStatusArr[i].getPath( );
      String name = srcPath.getName( );
      Path destPath = new Path( tgtDir + "/" + name);
      fs.rename( srcPath, destPath);
    }
  }
}
